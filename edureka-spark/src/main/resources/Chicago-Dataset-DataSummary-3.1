1. What are the total number of trips per year (i.e. 2013, 2014, 2015 and 2016)?

select 
year(trip_start_date) as trip_year, count(*) as trip_count 
from taxi_trip_details_taxi_trip_id_removed_ts
where trip_start_date is not null
group by year(trip_start_date) 

trip_year	trip_count
2013	16497775
2014	21977303
2015	13250826
2016	7747282
2017	10454850
2018	8994836
2019	1512

2. Create the same summary for number of trips at monthly level? Present the finding
with a small chart capturing any pattern or trend in the trip count across months?

select 
year(trip_start_date) as trip_year, month(trip_start_date) as trip_month, count(*) as trip_count 
from taxi_trip_details_taxi_trip_id_removed_ts
where trip_start_date is not null
group by year(trip_start_date), month(trip_start_date)


3. Find out the top 10 communities, where people travel to, based on the
dropoff_community field. (Check the fill rate of the field to check if at least 50% trips
have this field filled or not)

3.a to count non null dropoff

select count(*) from taxi_trip_details_taxi_trip_id_removed_ts where 
dropoff_community is not null

result: 71061343

3.b to group by and count,

select 
dropoff_community, count(*) as community_trips 
from taxi_trip_details_taxi_trip_id_removed_ts 
group by dropoff_community


dropoff_community	community_trips	Percentage
8	21361410	27.07
32	14298588	18.12
NULL	7863042	9.96
28	7216565	9.14
6	4994513	6.33
7	4483513	5.68
24	3328697	4.22
76	2769920	3.51
33	2271656	2.88
3	1358059	1.72
22	1293850	1.64

4. Find out the top 10 communities, across each year and check if there is a change
across years.
, l4.a
create table community_monthly_summary
as
select 
dropoff_community, year(trip_start_date) as start_year, count(*) as community_trips 
from taxi_trip_details_taxi_trip_id_removed_ts 
where trip_start_date is not null
group by dropoff_community, year(trip_start_date) 



5. Find out the same across weekdays and weekend days. To check if there is any sort
of pattern visible, probably based on office spaces and shopping areas on weekdays
and weekend days respectively.

Queries:

CREATE TABLE IF NOT EXISTS community_weekend_summary 
AS
select 
dropoff_community, weekend, count(*) as community_trips 
from taxi_trip_details_weekend_encoded 
group by dropoff_community, weekend

Weekend Top 10 communities

select 
dropoff_community, community_trips 
from community_weekend_summary 
where weekend = 1 and dropoff_community is not null 
order by community_trips desc
limit 10

Weekday Top 10 communites

select 
dropoff_community, community_trips 
from community_weekend_summary 
where weekend = 0 and dropoff_community is not null 
order by community_trips desc
limit 10




6. Find out the distribution of trip duration based on different bins, like <1 hr, 1 to 4 hr,
5 to 10, … 20 to 24 hr. Note that this requires converting trip_seconds into trip hours
as preprocessing.

Queries:

CREATE TABLE trip_duration_hours
AS
SELECT 
floor(trip_seconds/(60*60)) as trip_hour, taxi_id_int, weekend, trip_start_date
from 
taxi_trip_details_weekend_encoded

SELECT
trip_hour, count(*) as trip_count
FROM trip_duration_hours
GROUP BY trip_hour
ORDER BY trip_hour


7. Similarly find out the distribution of trip_miles, like 0 to 10 miles, 10 to 20, 20 to 50,
…

Queries:

CREATE TABLE trip_miles_details
AS
SELECT 
trip_miles, taxi_id_int, weekend, trip_start_date
from 
taxi_trip_details_weekend_encoded


CREATE TABLE IF NOT EXISTS trip_miles_rounded_summary
as
SELECT
floor(trip_miles) as miles_rounded, count(*) as trip_count
from
trip_miles_details
GROUP BY floor(trip_miles)

SELECT miles_rounded, trip_count
FROM 
trip_miles_rounded_summary
ORDER BY miles_rounded





8. Perform similar computation based on trip fare as well.

Queries:

CREATE TABLE trip_fare_rounded_details
AS
SELECT 
floor(trip_total_amt) as trip_fare_rounded, taxi_id_int, weekend, trip_start_date
from 
taxi_trip_details_weekend_encoded


CREATE TABLE IF NOT EXISTS trip_fare_rounded_summary
as
SELECT
trip_fare_rounded, count(*) as trip_count
from
trip_fare_rounded_details
GROUP BY trip_fare_rounded

SELECT trip_fare_rounded, trip_count
FROM 
trip_fare_rounded_summary
ORDER BY trip_fare_rounded



9. Compute the average trip fare per day & per trip. Compute the same based on
weekdays and weekend days. Find out if there is any substantial difference
observed.

Queries:
a. Avg trip fare per trip,
select avg(trip_total_amt) from taxi_trip_details_weekend_encoded

result: 14.98

b. Avg trip fare based on weekday and weekend,
select weekend, avg(trip_total_amt) from taxi_trip_details_weekend_encoded group by weekend

Weekday: 15.27
Weekend: 14.25


a. Avg total trip fare per day,

CREATE TABLE trip_daily_total_amount
AS
SELECT trip_start_date, sum(trip_total_amt) as daily_total_amt, count(*) as daily_trip_count, weekend
FROM
taxi_trip_details_weekend_encoded
GROUP BY trip_start_date, weekend


b. Daily Total amount (i.e. daily revenue potential in the market)

SELECT weekend, AVG(daily_total_amt) as avg_fare_per_day
FROM
trip_daily_total_amount
GROUP BY weekend

result:
Weekday Avg Daily total: 518,156  (~0.5M USD)
Weekend Avg Daily total: 475,136  (~0.5M USD)

c. Daily total trips avg across all days (i.e. daily demand indicator)

SELECT weekend, AVG(daily_trip_count) as avg_fare_per_day
FROM
trip_daily_total_amount
GROUP BY weekend

result:
Weekday avg: 33,923
Weekend avg: 33,339



10. Compute the total trip count per day for each unique taxi id. Compute the top 10
taxis based on the same.

Query:

a. To create the table,

CREATE TABLE taxi_trip_daily_total_amount
AS
SELECT taxi_id_int, trip_start_date, weekend, sum(trip_total_amt) as daily_total_amt, 
count(*) as daily_trip_count 
FROM
taxi_trip_details_weekend_encoded
GROUP BY taxi_id_int,trip_start_date, weekend

b. To query top 10 taxis based on the ride count,

CREATE TABLE taxi_id_summary
AS
SELECT taxi_id_int, AVG(daily_trip_count) as avg_trip_count, 
AVG(daily_total_amt) as avg_daily_total
FROM
taxi_trip_daily_total_amount
GROUP BY taxi_id_int

c. Top 10 based on avg daily trip count,

SELECT taxi_id_int, avg_trip_count
FROM taxi_id_summary
ORDER BY avg_trip_count DESC
LIMIT 10

c. Top 10 based on avg daily total amount,

SELECT taxi_id_int, avg_daily_total
FROM taxi_id_summary
ORDER BY avg_daily_total DESC
LIMIT 10


3.2 Daily, Weekly and Monthly summary

a. To create daily forecast table,

CREATE TABLE IF NOT EXISTS taxi_trip_details_daily_summary
AS
SELECT
trip_start_date,
month(trip_start_date) as start_month,
year(trip_start_date) as start_year,
count(*) as daily_trip_count,
sum(trip_total_amt) as daily_total_amt,
sum(trip_miles) as daily_total_miles,
round(sum(trip_seconds)/60) as daily_total_mins,
avg(trip_total_amt) as daily_avg_amt,
avg(trip_miles) as daily_avg_miles,
round(avg(trip_seconds)/60) as daily_avg_mins
FROM
taxi_trip_details_weekend_encoded
GROUP BY trip_start_date

b. To create date details
CREATE TABLE IF NOT EXISTS taxi_trips_distinct_dates
AS
SELECT DISTINCT 
trip_start_date,
start_dayofweek,
weekend
from
taxi_trip_details_weekend_encoded


c. To add day of week on top of daily summary table.

CREATE TABLE IF NOT EXISTS taxi_trips_daily_summary_with_dayofweek
AS
SELECT 
a.*, 
start_dayofweek,
weekend
from
taxi_trip_details_daily_summary as a
join
taxi_trips_distinct_dates as b
on a.trip_start_date = b.trip_start_date

d. Indexed daily summary table,

DROP TABLE taxi_trip_daily_summary_indexed

CREATE TABLE IF NOT EXISTS taxi_trip_daily_summary_indexed
AS
SELECT
row_number() over() as id,
*
from
taxi_trips_daily_summary_with_dayofweek
ORDER BY trip_start_date

e. Temp table ordered,

CREATE TABLE IF NOT EXISTS taxi_trip_daily_temp
AS
SELECT
*
from
taxi_trips_daily_summary_with_dayofweek
ORDER BY trip_start_date

f. Row index on temp table,

CREATE TABLE IF NOT EXISTS taxi_trip_daily_summary_indexed
AS
SELECT
row_number() over(order by trip_start_date asc) as id,
*
from
taxi_trip_daily_temp

g. Week number index,

CREATE TABLE IF NOT EXISTS taxi_trip_daily_week_no_indexed
AS
SELECT *, floor((id-6)/7)+1 as week_number
FROM
taxi_trip_daily_summary_indexed

3.2.2 Weekly summary from daily summary with week_number

CREATE TABLE IF NOT EXISTS taxi_trip_weekly_summary
AS
SELECT
week_number,
sum(daily_trip_count) as weekly_trip_count,
sum(daily_total_amt) as weekly_total_amt,
sum(daily_total_miles) as weekly_total_miles,
sum(daily_total_mins) as weekly_total_mins,
(sum(daily_trip_count) * sum(daily_avg_amt))/sum(daily_trip_count) as weekly_avg_amt,
(sum(daily_trip_count) * sum(daily_avg_miles))/sum(daily_trip_count) as weekly_avg_miles,
(sum(daily_trip_count) * sum(daily_avg_mins))/sum(daily_trip_count) as weekly_avg_mins
FROM 
taxi_trip_daily_week_no_indexed
GROUP BY week_number


3.2.3 Monthly summary from daily summary

CREATE TABLE IF NOT EXISTS taxi_trip_monthly_summary
AS
SELECT
start_month, 
start_year,
sum(daily_trip_count) as monthly_trip_count,
sum(daily_total_amt) as monthly_total_amt,
sum(daily_total_miles) as monthly_total_miles,
sum(daily_total_mins) as monthly_total_mins,
(sum(daily_trip_count)*sum(daily_avg_amt))/sum(daily_trip_count) as monthly_avg_amt,
(sum(daily_trip_count)*sum(daily_avg_miles))/sum(daily_trip_count) as monthly_avg_miles,
(sum(daily_trip_count)*sum(daily_avg_mins))/sum(daily_trip_count) as monthly_avg_mins
FROM
taxi_trips_daily_summary_with_dayofweek
GROUP BY start_month, start_year


3.3 Community summary

3.3.1 Community Origin Summary

CREATE TABLE IF NOT EXISTS taxi_trip_community_origin_summary
AS
SELECT
pickup_community,
count(*) as daily_trip_count,
sum(trip_total_amt) as daily_total_amt,
sum(trip_miles) as daily_total_miles,
round(sum(trip_seconds)/60) as daily_total_mins,
avg(trip_total_amt) as daily_avg_amt,
avg(trip_miles) as daily_avg_miles,
round(avg(trip_seconds)/60) as daily_avg_mins
FROM
taxi_trip_details_weekend_encoded
GROUP BY pickup_community

3.3.2

CREATE TABLE IF NOT EXISTS taxi_trip_community_dropoff_summary
AS
SELECT
dropoff_community,
count(*) as daily_trip_count,
sum(trip_total_amt) as daily_total_amt,
sum(trip_miles) as daily_total_miles,
round(sum(trip_seconds)/60) as daily_total_mins,
avg(trip_total_amt) as daily_avg_amt,
avg(trip_miles) as daily_avg_miles,
round(avg(trip_seconds)/60) as daily_avg_mins
FROM
taxi_trip_details_weekend_encoded
GROUP BY dropoff_community

3.4 Seed table for OD pair processing,

CREATE TABLE IF NOT EXISTS taxi_trip_community_od_input
AS
SELECT
pickup_community,
dropoff_community,
trip_total_amt,
trip_miles,
trip_seconds
FROM
taxi_trip_details_weekend_encoded

CREATE TABLE IF NOT EXISTS taxi_trip_community_od_input_tsv
ROW FORMAT DELIMITED
FIELDS TERMINATED BY "\t"
LINES TERMINATED BY "\n"
STORED AS TEXTFILE
AS
SELECT 
*
FROM 
taxi_trip_community_od_input


hdfs dfs -get /user/hive/warehouse/chicago_taxis.db/taxi_trip_community_od_input_tsv/ .

Dir containing the input file:
/mnt/bigdatapgp/edureka_549997/taxi_trip_community_od_input_tsv
 

Command to execute (from dir: /mnt/bigdatapgp/edureka_549997):
spark-submit --master local[16] --executor-memory 16g --driver-memory 4g --class com.edureka.spark.ChicagoTaxiDataProcess Spark-Code/spark/edureka-spar
k/target/edureka-spark-0.0.1-SNAPSHOT-jar-with-dependencies.jar taxi_trip_community_od_input_tsv output > out.txt 2>err.txt &

Note: Delete output dir, whenever need to rerun

Sample output can be explored in the dir: /mnt/bigdatapgp/edureka_549997/output

wc -l part-000*  --> 5525
cut -f1 -d, part-000* | sort | uniq | wc -l   --> 77
cut -f2 -d, part-000* | sort | uniq | wc -l	  --> 77

mkdir /tmp/Chicago_taxi_details/
cat output/part-000* > /tmp/Chicago_taxi_details/od_pair_summary.csv

hdfs dfs -mkdir /tmp/Chicago_taxi_details
hdfs dfs -put /tmp/Chicago_taxi_details/od_pair_summary.csv /tmp/Chicago_taxi_details/


Creating hive table and loading data into it,

CREATE TABLE IF NOT EXISTS chicago_taxis.od_pair_summary_output (
od_pair_summary_str String)
STORED AS TEXTFILE;


LOAD DATA INPATH '/tmp/Chicago_taxi_details/od_pair_summary.csv'
OVERWRITE INTO TABLE chicago_taxis.od_pair_summary_output;


Splitting the data and creating taxi_trip_details table,

CREATE TABLE IF NOT EXISTS chicago_taxis.od_pair_summary_output_details
AS
select cast(split(od_pair_summary_str, ",")[0] as tinyint) as pickup_community,
cast(split(od_pair_summary_str, ",")[1] as tinyint) as dropoff_community,
cast(split(od_pair_summary_str, ",")[2] as int) as trip_count,
cast(split(od_pair_summary_str, ",")[3] as int) as total_mins,
cast(split(od_pair_summary_str, ",")[4] as float) as total_miles,
cast(split(od_pair_summary_str, ",")[5] as float) as total_amount,
cast(split(od_pair_summary_str, ",")[6] as float) as avg_mins,
cast(split(od_pair_summary_str, ",")[7] as float) as avg_miles,
cast(split(od_pair_summary_str, ",")[8] as float) as avg_amount
from 
chicago_taxis.od_pair_summary_output;


3.5 Company summary
company

CREATE TABLE IF NOT EXISTS taxi_trip_company_summary
AS
SELECT
company,
count(*) as daily_trip_count,
sum(trip_total_amt) as daily_total_amt,
sum(trip_miles) as daily_total_miles,
round(sum(trip_seconds)/60) as daily_total_mins,
avg(trip_total_amt) as daily_avg_amt,
avg(trip_miles) as daily_avg_miles,
round(avg(trip_seconds)/60) as daily_avg_mins
FROM
taxi_trip_details_weekend_encoded
GROUP BY company

3.6 MySQL

3.6.1 Community Summary

a. Table: CommunityOriginSummary

DDL Stmt:
CREATE TABLE CommunityOriginSummary (
pickup_community tinyint,
daily_trip_count bigint,	
daily_total_amt double,	
daily_total_miles double,	
daily_total_mins double,	
daily_avg_amt double,	
daily_avg_miles double,	
daily_avg_mins double
)

CREATE TABLE taxi_trip_community_origin_summary_1 
AS
SELECT 
* 
FROM taxi_trip_community_origin_summary
where pickup_community is NOT NULL

sqoop export --connect "jdbc:mysql://dbserver.edu.cloudlab.com:3306/labuser_database" \
   --username edu_labuser \
   --password edureka \
   --table CommunityOriginSummary \
   --export-dir /user/hive/warehouse/chicago_taxis.db/taxi_trip_community_origin_summary_1/ \
   --input-fields-terminated-by '\001'
   --num-mappers 3 

b. Table: CommunityDestSummary


DDL Stmt:
CREATE TABLE CommunityDestSummary (
dropoff_community tinyint,
daily_trip_count bigint,	
daily_total_amt double,	
daily_total_miles double,	
daily_total_mins double,	
daily_avg_amt double,	
daily_avg_miles double,	
daily_avg_mins double
)

CREATE TABLE taxi_trip_community_dropoff_summary_1 
AS
SELECT 
* 
FROM taxi_trip_community_dropoff_summary
where pickup_community is NOT NULL

sqoop export --connect "jdbc:mysql://dbserver.edu.cloudlab.com:3306/labuser_database" \
   --username edu_labuser \
   --password edureka \
   --table CommunityDestSummary \
   --export-dir /user/hive/warehouse/chicago_taxis.db/taxi_trip_community_dropoff_summary_1/ \
   --input-fields-terminated-by '\001'
   --num-mappers 2 

3.6.2 Company summary

Table: CompanySummaryStats

DDL Stmt:

CREATE TABLE CompanySummaryStats (
company varchar(255),	
daily_trip_count bigint,	
daily_total_amt double,	
daily_total_miles double,	
daily_total_mins double,	
daily_avg_amt double,	
daily_avg_miles double,	
daily_avg_mins double	
 );
 
CREATE TABLE taxi_trip_company_summary_1 
AS
SELECT 
* 
FROM taxi_trip_company_summary
where company is NOT NULL



sqoop export --connect "jdbc:mysql://dbserver.edu.cloudlab.com:3306/labuser_database" \
   --username edu_labuser \
   --password edureka \
   --table CompanySummaryStats \
   --export-dir /user/hive/warehouse/chicago_taxis.db/taxi_trip_company_summary_1/ \
   --input-fields-terminated-by '\001'
   --num-mappers 5



3.7 HBase

3.7.1 Company Summary,
Table: CompanySummary
Column Families: TripCountStats, RevenueDetails

a. Create Command:

hbase> create 'CompanySummary', 'TripCountStats', 'RevenueDetails'

b. Sample put data:

hbase> put 'CompanySummary','TestCompany',TripCountStats:TotalTrips','3000', TripCountStats:YearlyAvg','1000', TripCountStats:MonthlyAvg','83.3'


Creating tables with tab separated storage.

CREATE TABLE taxi_trip_company_summary_2
ROW FORMAT delimited
fields terminated by "\t"
STORED AS TEXTFILE
AS
SELECT * from taxi_trip_company_summary_1

To retrieve files:
hdfs dfs -get /user/hive/warehouse/chicago_taxis.db/taxi_trip_company_summary_2/ .

3.7.2 Community Summary,
Table: CommunitySummary
Column Families: OriginStats, DestinationStats, RevenueDetails

Create Command:

hbase> create 'CommunitySummary', 'OriginStats', 'DestinationStats', 'RevenueDetails'

To get the data to process.

Creating tables with tab separated storage.

a. Origin summary

CREATE TABLE taxi_trip_community_origin_summary_2
ROW FORMAT delimited
fields terminated by "\t"
STORED AS TEXTFILE
AS
SELECT * from taxi_trip_community_origin_summary_1

To retrieve the file:
hdfs dfs -get /user/hive/warehouse/chicago_taxis.db/taxi_trip_community_origin_summary_2/ .

b. Destination summary

CREATE TABLE taxi_trip_community_dropoff_summary_2
ROW FORMAT delimited
fields terminated by "\t"
STORED AS TEXTFILE
AS
SELECT * from taxi_trip_community_dropoff_summary_1

To retrieve the file:

hdfs dfs -get /user/hive/warehouse/chicago_taxis.db/taxi_trip_community_dropoff_summary_2/ .

HBase data insert can read data from this file and insertion into HBase.